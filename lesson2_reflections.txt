What happens when you initialize a repository? Why do you need to do it?

A .git directory gets created. 
I need git repository to track changes on my files.

How is the staging area different from the working directory and the repository? What value do you think it offers?
git add and git status are both working on staging area and are working before commits.
Staging area is not persistent. it can be easily reverted back without keeping a log about it.

How can you use the staging area to make sure you have one commit per logical
change?
Use "git add" to add a file to staging area that you will be able to commit later.
Staging area is a copy of the most recent commit, until I add changes to it.
To compare Staging area with theworking directory use git diff with no arguments.
git diff

git diff --staged --> Will compare staging area with the most recent commit.
When changes are in stage area, they also can be verified locally.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches are usefull when I need to label the commits and for sure when I start multiple separated projects/versions of the same code.
For example run the following actions in parallel: 
 - create a easier version of a game
 - fix bugs
 - add a specific language
 - add new features
They can be merged at the end

To list current branches. The starred branch is the current branch.
 git branch
* master
To create a new branch named easy-mode:
adrian (master) asteroids $ git branch easy-mode
adrian (master) asteroids $ git branch
  easy-mode
* master
To switch to another branch. In this case the newly created branch:
adrian (master) asteroids $ git checkout easy-mode
Switched to branch 'easy-mode'
adrian (easy-mode) asteroids $ git branch
* easy-mode
  master
adrian (easy-mode) asteroids $ 

git log --graph --oneline

To create and checkout in the same time to a new branch:
git checkout -b new_branch_name

This helps when you have a commit which is not included in any branch.


How do the diagrams help you visualize the branch structure?
git log --graph --oneline --> will generate a diagram with the commits per branch.

Diagrams helps to understand how the project evolved per each branch and how it can be merged.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

