What happens when you initialize a repository? Why do you need to do it?

A .git directory gets created. 
I need git repository to track changes on my files.

How is the staging area different from the working directory and the repository? What value do you think it offers?
git add and git status are both working on staging area and are working before commits.
Staging area is not persistent. it can be easily reverted back without keeping a log about it.

How can you use the staging area to make sure you have one commit per logical
change?
Use "git add" to add a file to staging area that you will be able to commit later.
Staging area is a copy of the most recent commit, until I add changes to it.
To compare Staging area with theworking directory use git diff with no arguments.
git diff

git diff --staged --> Will compare staging area with the most recent commit.
When changes are in stage area, they also can be verified locally.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches are usefull when I need to label the commits and for sure when I start multiple separated projects/versions of the same code.
For example run the following actions in parallel: 
 - create a easier version of a game
 - fix bugs
 - add a specific language
 - add new features
They can be merged at the end

To list current branches. The starred branch is the current branch.
 git branch
* master
To create a new branch named easy-mode:
adrian (master) asteroids $ git branch easy-mode
adrian (master) asteroids $ git branch
  easy-mode
* master
To switch to another branch. In this case the newly created branch:
adrian (master) asteroids $ git checkout easy-mode
Switched to branch 'easy-mode'
adrian (easy-mode) asteroids $ git branch
* easy-mode
  master
adrian (easy-mode) asteroids $ 

git log --graph --oneline

To create and checkout in the same time to a new branch:
git checkout -b new_branch_name

This helps when you have a commit which is not included in any branch.


How do the diagrams help you visualize the branch structure?
git log --graph --oneline --> will generate a diagram with the commits per branch.

Diagrams helps to understand how the project evolved per each branch and how it can be merged.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
The result is: we'll have the commits from both branches merged into one.
To merge: 
git checkout master
adrian (master) asteroids $ git branch
  coins
  easy-mode
* master

We want to merge branch coins with master, so we run:
git merge master coins

After that we loose the track and we cannot determine the parent of a commit. 
In order to find what a commit has added then we can use this command:

git show >commit_id<

It will list what the commit id has added compared with it's parent.

A note about git merge

git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, you can simply git checkout branch1 and then type git merge branch2. The only reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged, the order in which they are typed into the command line does not matter. The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch. 


What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
It may remove some lines which were deleted by one contributor, but maybe they are needed by
 another.

